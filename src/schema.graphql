type Query {
  version: String!

  # Authenticated users can retrieve info about themselves
  me: User

  # Authenticated users can retrieve info about a given user
  user(id: ID!): User
  userByEmail(email: String!): User

  # Authenticated users can retrieve a list of users
  users(skip: Int, take: Int, orderBy: UserOrderByInput): [User!]!
}

type Mutation {
  # Everyone can signup
  signup(email: String!, password: String!): AuthPayload!

  # Signup with invite token
  signupByInvite(email: String!, inviteToken: String!, password: String!): AuthPayload!

  # Everyone can login
  login(email: String!, password: String!): AuthPayload!

  # Invite a user
  inviteUser(email: String!): User!

  # Send reset password email
  sendResetPassword(email: String!): User!

  # Change password
  changePassword(email: String!): User!

  # Confirm email
  confirmEmail(email: String!, emailConfirmToken: String!): User!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
}

input UserOrderByInput {
  email: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}